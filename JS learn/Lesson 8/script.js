"use strict";

// alert('Greeting to all!');

var x = 1;

x = -x;
alert( x ); // -1, применили унарный минус

////////////////////////////////////////////////////

var x = 1, y = 3;
alert( y - x ); // 2, бинарный минус

////////////////////////////////////////////////////

var a = 'My'+ 'strict';
alert( a ); // Mystrict

////////////////////////////////////////////////////

alert( '1' + 2 ); // "12"
alert( 2 + '1' ); // "21"

////////////////////////////////////////////////////

alert( +1 );       // 1
alert( +(1 - 2) ); // -1

////////////////////////////////////////////////////

var apples = '2';
var oranges = '3';

alert( apples + oranges ); // "23", так как бинарный плюс складывает строки

////////////////////////////////////////////////////

var $apples = '2';
var $oranges = '3';

alert( +$apples + +$oranges ); // 5, число, оба операнда предварительно преобразованы в числа

////////////////////////////////////////////////////

var x = 2 * 2 + 1;
alert( x ); // 5

var q, w, e;
q = w = e = 2 + 2;
alert( q ); // 4
alert( w ); // 4
alert( e ); // 4

////////////////////////////////////////////////////

var z = 1;
var s = 2;

var d = 3 - (z = s + 1);

alert( z ); // 3
alert( d ); // 0

////////////////////////////////////////////////////

// a % b - это остаток от деления a на b

alert( 5 % 2 );  // 1, остаток от деления 5 на 2
alert( 8 % 3 );  // 2, остаток от деления 8 на 3
alert( 6 % 3 );  // 0, остаток от деления 6 на 3
alert( 31 % 8 ); // 7, остаток от деления 31 на 8

////////////////////////////////////////////////////

// Инкремент ++ увеличивает на 1:
var i = 2;
i++;        // более короткая запись для i = i + 1.
alert(i);   // 3

// Декремент -- уменьшает на 1:
var i = 2;
i--;        // более короткая запись для i = i - 1.
alert(i);   // 1

////////////////////////////////////////////////////

var i = 1;
var a = ++i;

alert(a); // 2
alert(i); // 2

////////////////////////////////////////////////////

var i = 1;
var a = i++;

alert(a); // 2

////////////////////////////////////////////////////

var i = 0;
i++;
++i;
alert( i ); // 2

////////////////////////////////////////////////////

var i = 0;
alert( ++i ); // 1

var i = 0;
alert( i++ ); // 0

////////////////////////////////////////////////////

var i = 1;
alert( 2 * ++i ); // 4

var i = 1;
alert( 2 * i++ ); // 2, выполнился раньше но значение вернул старое
alert( i );       // 2
alert( 2 * i++ ); // 4
alert( i );       // 3

////////////////////////////////////////////////////

/*
Поддерживаются следующие побитовые операторы:

  AND(и) ( & )
  OR(или) ( | )
  XOR(побитовое исключающее или) ( ^ )
  NOT(не) ( ~ )
  LEFT SHIFT(левый сдвиг) ( << )
  RIGHT SHIFT(правый сдвиг) ( >> )
  ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )
*/

var n = 2;
n = n + 5;
n = n * 2;

var n = 2;
n += 5; // теперь n=7 (работает как n = n + 5)
n *= 2; // теперь n=14 (работает как n = n * 2)

alert( n ); // 16 (n = 2 * 8)

////////////////////////////////////////////////////

var a = (5, 6);
alert( a );

////////////////////////////////////////////////////

// Exercise 1
var a = 1, b = 1, c , d;

c = ++a; alert(c); // 2
d = b++; alert(d); // 1

c = (2+ ++a); alert(c); // 5
d = (2+ b++); alert(d); // 4

alert(a); // 3
alert(b); // 3

// Exercise 2
var a = 2;

var x = 1 + (a *= 2);
