"use strict";

var access = parseInt('11000', 2);
alert( access );

var access2 = access.toString(2);
alert( access2 );

////////////////////////////////////////////////////

// & (Побитовое И)

var q = 14 & 9;
alert( q );

var q = parseInt('1001', 2);
alert( q );
var q2 = q.toString(2);
alert( q2 );

// | (Побитовое ИЛИ)

var w = 14 | 9;
alert( w );

// ^ (Исключающее ИЛИ)

var e = 14 ^ 9;
alert( e );

// ~ (Побитовое НЕ)
// ~n == -(n+1)

alert( ~3 );  // -4
alert( ~-1 ); // 0

// << (Битовый сдвиг влево)
// Левый сдвиг почти равен умножению на 2
// Битовый сдвиг << N обычно имеет тот же эффект, что и умножение
// на два N раз, например:

alert( 9 << 2 );  // 36, умножение на 2 два раза
alert( 3 << 1 );  // 6, умножение на 2
alert( 3 << 2 );  // 12, умножение на 2 два раза
alert( 3 << 3 );  // 24, умноженние на 2 три раза
alert( 2 << 10 ); // 1024

// >> (Правый битовый сдвиг, переносящий знак)
// Правый сдвиг почти равен целочисленному делению на 2
// Битовый сдвиг >> N обычно имеет тот же результат, что и целочисленное
// деление на два N раз:

alert( 100 >> 1 ); // 50, деление на 2
alert( 100 >> 2 ); // 25, деление на 2 два раза
alert( 100 >> 3 ); // 12, деление на 2 три раза, целая часть от результата

// >>> (Правый сдвиг с заполнением нулями)
// Для неотрицательных чисел правый сдвиг с заполнением нулями >>> и правый
// сдвиг с переносом знака >> дадут одинаковый результат, т.к в обоих случаях
// слева добавятся нули.
// Для отрицательных чисел – результат работы разный.
// Например, -9 >>> 2 даст 1073741821, в отличие от -9 >> 2 (дает -3):

alert( 100 >>> 1 );
alert( 100 >>> 2 );
